" Configure Pathogen
call pathogen#infect()
call pathogen#helptags()

" Syntax HL and indentation
syntax on
filetype plugin indent on
set et bs=2 ts=4 sts=4 sw=4

" Configure NERDTree
let NERDTreeIgnore = ['\.pyc$']
nmap <F7> :NERDTreeToggle<CR>

" Configure vim-airline
let g:airline_powerline_fonts = 1
set laststatus=2

" Text colours and encoding
set t_Co=256
set encoding=utf-8

" Configure CtrlP
set runtimepath^=~/.vim/bundle/ctrlp

" Extra settings
set wildmenu
set number
set hlsearch
set incsearch
set colorcolumn=80

" Extra keymappings
nmap <F6> :!grep "^\s*\(def\\|class\) " %<CR>
nmap <F5> :set paste!<CR>
nmap <F4> :set nu!<CR>
nmap <F3> :!pygt <C-R><C-W> <CR>
vmap <F3> "py:<C-W>!pygt <C-R>p <CR>
nmap <F2> mm:%s/<C-R><C-W>//gc<LEFT><LEFT><LEFT>
nmap <F1> :w !pandoc -c ~/css/github.css -o %:r.html<CR>
nmap n nzz
nmap N Nzz

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" autocmd
if has("autocmd")
    autocmd BufReadPost fugitive://* set bufhidden=delete
    autocmd InsertLeave /home/nic/logs/*.md w
endif

" Fugitive commands
command! Gadd exec "Git add -p"
command! -nargs=* Ggraph exec "Git graph " . <q-args>
command! -nargs=? Gpush exec join(["Git push", len(<q-args>)==0?"origin":<q-args>, system("git rev-parse --abbrev-ref HEAD")], " ")[0:-2]
" . `git rev-parse --abbrev-ref HEAD`

" highlights
highlight Pmenu ctermbg=blue
highlight PmenuSel ctermbg=darkblue
highlight Search ctermbg=blue

" vim-orca
let g:orca_debug = 0

" Work log mappings
vmap <leader>t :s/^\( [↳]\)\\|[*☑∅]/☐/<CR>:noh<CR>:w<CR> " ☐ : <C-R>u2610
nmap <leader>t :.s/^\( [↳]\)\\|[*☑∅]/☐/<CR>:noh<CR>:w<CR>
vmap <leader>d :s/^\( [↳]\)\\|[*☐∅]/☑/<CR>:noh<CR>:w<CR> " ☑ : <C-R>u2611
nmap <leader>d :.s/^\( [↳]\)\\|[*☐∅]/☑/<CR>:noh<CR>:w<CR>
vmap <leader>s :s/^\( [↳]\)\\|[☑☐∅]/*/<CR>:noh<CR>:w<CR> " * : <S-8>
nmap <leader>s :.s/^\( [↳]\)\\|[☑☐∅]/*/<CR>:noh<CR>:w<CR>
vmap <leader>n :s/^\( [↳]\)\\|[☑☐*]/∅/<CR>:noh<CR>:w<CR> " ∅ : <C-R>u2205
nmap <leader>n :.s/^\( [↳]\)\\|[☑☐*]/∅/<CR>:noh<CR>:w<CR>
vmap <leader>r :s/^[☑☐*∅]/ ↳/<CR>:noh<CR>:w<CR> " ↳ : <C-R>u21b3
nmap <leader>r :.s/^[☑☐*∅]/ ↳/<CR>:noh<CR>:w<CR>

nmap <leader><space> :.s/^/\r# \r\r## Goals\r/<CR>:noh<CR>kkk$"=strftime("%d/%m/%y")<CR>p

vmap <leader>. :s/$/./<CR>:noh<CR>:w<CR>
nmap <leader>. :.s/$/./<CR>:noh<CR>:w<CR>

" Work log functions/commands
function! FoldJira() abort
    let jira_code = matchstr(getline("."), "(.*)")
    let start = 1

    let saved_cursor = getpos('.')[1:2]
    call cursor(1, 1)

    while 1
        let log_title = search(jira_code, "W")
        if log_title == 0
            break
        endif

        " fold start -> log title
        execute ":" . start . "," . (log_title - 1) . "fold"

        " Find the next title
        let next_title = [search("^# ", "W")]
        call cursor(log_title, 0)
        call add(next_title, search("^## ", "W"))

        if index(next_title, 0) >= 0
            call remove(next_title, index(next_title, 0))
        endif

        let start = min(next_title)
    endwhile

    call cursor(saved_cursor)
endfunction

nmap <leader>z :call FoldJira()

function! CpParagraph() abort
    exec 'normal! {)"*y}'
endfunction

nmap <leader>c :call CpParagraph()<CR>

function! PushParagraph() abort
    "Copy text from current paragraph
    exec 'normal! {)"9y}'

    "write to file
    let tmp = tempname()
    exec writefile(split(@9, '\n'), tmp)
    let cmd = ['python2.7', './notepush.py', tmp]

    "Push note
    exec "silent !" . join(cmd, ' ')
    "echom join(cmd, ' ')
endfunction

nmap <leader>p :call PushParagraph()<CR>
